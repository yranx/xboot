SpringBoot+Redis实现token鉴权
https://www.imooc.com/article/49750
  用户登录成功后后台会返回一个token给调用者，同时我们自定义了@AuthToken注解，被该注解标注的api进行请求的时候都需要进行token效验，
  效验通过才可以正常访问，实现接口级的鉴权控制。同时token具有生命周期，在用户持续一段时间不进行操作的话，token则会过期，
  用户一直操作的话，则不会过期。

  创建数据结构：

  SET FOREIGN_KEY_CHECKS=0;

  -- ----------------------------
  -- Table structure for t_sys_user
  -- ----------------------------
  DROP TABLE IF EXISTS `t_sys_user`;
  CREATE TABLE `t_sys_user` (
    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
    `username` varchar(30) DEFAULT NULL COMMENT '用户名',
    `password` varchar(30) DEFAULT NULL COMMENT '密码',
    `created_at` datetime DEFAULT NULL COMMENT '创建时间',
    `updated_at` datetime DEFAULT NULL COMMENT '更新时间',
    `del_flag` tinyint(1) DEFAULT NULL COMMENT '删除标识 0:未删除 1:已删除',
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;

  流程分析
  1).客户端登录，输入用户名和密码，后台进行验证，如果验证失败则返回登录失败的提示。
  如果验证成功，则生成token然后将username和token双向绑定(可以根据username取出token也可以根据token取出username)存入redis,
  同时使用token+username作为key把当前时间戳也存入redis。并且给它们都设置过期时间。
  2)每次请求都会走拦截器，如果该接口标注了@AuthToken注解，则要检查http header中的Authorization字段，获取token，
  然后由于token与username双向绑定，我们可以通过获取的token来尝试从redis中获取username,如果可以获取则说明token正确，反之，说明错误，返回鉴权失败。
  3)token可以根据用户使用的情况来动态的调整自己过期时间。我们在生成token的同时也往redis里面存入了创建token时的时间戳，
  每次请求被拦截器拦截token 验证成功之后，将当前时间与存在redis里面的token生成时刻的时间戳进行比较，
  当当前时间的距离创建时间快要到达设置的redis过期时间的话，就重新设置token过期时间，将过期时间延长。
  如果用户在设置的redis过期时间的时间长度内没有进行任何操作（没有发请求），则token会在redis中过期。

  ConstantUtil Md5TokenGenerator TokenGenerator AuthToken AuthorizationInterceptor  WebAppConfiguration  UserLoginController
